<?phpnamespace App\FixturePredictions\Test\Functional;use App\Core\Test\Trait\ContainerTestTrait;use App\FixturePredictions\DataFixture\SeasonFixture;use App\FixturePredictions\Enum\CompetitionCodeEnum;use App\FixturePredictions\Messenger\SyncMessage;use App\FixturePredictions\Repository\CompetitionRepository;use App\FixturePredictions\Repository\SeasonRepository;use App\FixturePredictions\Service\FixtureProvider;use DateTimeImmutable;use Exception;use PHPUnit\Framework\Attributes\TestDox;use PHPUnit\Framework\MockObject\MockObject;use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;use Symfony\Component\Messenger\Exception\ExceptionInterface;use Symfony\Component\Messenger\MessageBusInterface;#[TestDox('Fixture Predictions')]class SyncResultsTest extends KernelTestCase{    use ContainerTestTrait;    private MessageBusInterface $messageBus;    private FixtureProvider&MockObject $fixturesProviderMock;    public function setUp(): void    {        $this->messageBus = $this->getService(MessageBusInterface::class);        $this->fixturesProviderMock = $this->createMock(FixtureProvider::class);        static::getContainer()->set(FixtureProvider::class, $this->fixturesProviderMock);    }    /**     * @throws ExceptionInterface     */    #[TestDox('Sync results: dispatch sync message')]    public function testDispatchSyncMessage(): void    {        $competitionRepository = $this->getService(CompetitionRepository::class);        $seasonRepository = $this->getService(SeasonRepository::class);        $competition = $competitionRepository->findOneByCode(CompetitionCodeEnum::EPL->value);        $season = $seasonRepository->findOneByYear(SeasonFixture::CURRENT_SEASON);        $from = new DateTimeImmutable('2025-01-01T00:00:00Z');        $to = new DateTimeImmutable('2025-01-02T00:00:00Z');        $this->fixturesProviderMock            ->expects(self::once())            ->method('sync')            ->with($competition, $season, $from, $to);        $this->messageBus->dispatch(new SyncMessage(from: $from, to: $to));    }    /**     * @throws ExceptionInterface     */    #[TestDox('Sync results: dispatch sync message with default params')]    public function testDispatchSyncMessageWithDefaultParams(): void    {        $this->fixturesProviderMock->expects(self::once())->method('sync');        $this->messageBus->dispatch(new SyncMessage(year: SeasonFixture::CURRENT_SEASON));    }    /**     * @throws ExceptionInterface|\PHPUnit\Framework\MockObject\Exception     */    #[TestDox('Sync results: competition not found')]    public function testCompetitionNotFound(): void    {        $repo = $this->createMock(CompetitionRepository::class);        $repo->method('findOneByCode')->willReturn(null);        self::getContainer()->set(CompetitionRepository::class, $repo);        self::expectException(Exception::class);        $this->messageBus->dispatch(new SyncMessage());    }    /**     * @throws ExceptionInterface|\PHPUnit\Framework\MockObject\Exception     */    #[TestDox('Sync results: season not found')]    public function testSeasonNotFound(): void    {        $repo = $this->createMock(SeasonRepository::class);        $repo->method('findOneByYear')->willReturn(null);        self::getContainer()->set(SeasonRepository::class, $repo);        self::expectException(Exception::class);        $this->messageBus->dispatch(new SyncMessage());    }}